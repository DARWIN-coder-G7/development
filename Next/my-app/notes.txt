React Server Components

  --By default next.js treats all components as server components
  --These Components can Perform-server-side-tasks like Reading Files and fetching data from DB
  --The Problem is they Can't use React hooks or handle user Interactions.

Client Components

  --Need to add "Use Client" Directive at the top of the component Files
  --These are traditional react components not capable of reacting with DB or reading Files

Routing
 
 --Files and folder structures
   1. All Routes must live inside the App Folder
   2.Route files must be named either page.js or page.tsx
   3.Each Folder Repersents the segment of the Url Path

layout.tsx
   Even If you delete this file then do npm run dev next js will automatically generate this file

Private folder 
  A way to tell Next.js hey this folder is just for internal stuff - don't include it in the routing system.
  The folder and all its subfolders are excluded from routing
  Add an underscore at the start of the folder Name.

----- why routing through tsx
Basically in Next.js we are supposed to create our components as a seperate folder away from app Folder
The reason Behind this is we are seggregating our routes as a seperate folder logic 

Group Routes
  To Group the routes  we need to create a base folder with name wrapped by 9 and 0 brackets like this (folderName)
  Then that folder will have so many folders within that so each of it will have a page.tsx file

How to create Layouts
  Layouts like keeping Header and Footer as static one and the content in between will change dynamically
  Export a component from layout.tsx or layout.js file
  That Component takes a children Prop which next js will populate  with your page content

Multiple Root Layouts
if in case there is a Need that we dont want to show the header and footer for login and few other Routes
  Route group uses:
   Organize our project structure without affecting URLs
   Apply Layouts Selectively to Specific parts of our Application